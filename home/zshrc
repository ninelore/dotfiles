####################
#  ninelore.zshrc  #
####################

# History
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory autocd
bindkey -e

# compinit
zstyle :compinstall filename '$HOME/.zshrc'
autoload -Uz compinit
compinit

### OH-MY-ZSH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# zsh theme
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"
#ZSH_THEME="nicoulaj"

# Uncomment the following line to use case-sensitive completion.
#CASE_SENSITIVE="true"

# Case-sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Disable Auto Updating of oh-my-zsh
#DISABLE_AUTO_UPDATE="true"

# oh-my-zsh auto update without asking
DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to enable command auto-correction.
#ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
#COMPLETION_WAITING_DOTS="true"

# Disable dirty repo check (speed-up)
#DISABLE_UNTRACKED_FILES_DIRTY="true"

# History timestamps
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
#HIST_STAMPS="mm/dd/yyyy"

# oh-my-zsh plugins
plugins=(git)

# oh-my-zsh.sh
source $ZSH/oh-my-zsh.sh

# vim mode
bindkey -v


### ENV and PATH
# Editor
#export EDITOR="/usr/bin/code"
#export EDITOR="/usr/bin/nvim"

# user binaries
if [[ -d $HOME/.local/bin ]]; then
	export PATH="$HOME/.local/bin:$PATH"
fi

# android sdk
export ANDROID_HOME="$HOME/android-sdk"
if [[ -d "$ANDROID_HOME" ]]; then
	PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"
fi

# rust
if [[ -d $HOME/.cargo/bin ]]; then
	export PATH="$HOME/.cargo/bin:$PATH"
fi

# fly.io
if [[ -d $HOME/.fly/bin ]]; then
	export PATH="$HOME/.fly/bin:$PATH"
fi


### Renember SSH key
SAVESSH=false
if [[ SAVESSH ]]; then
	env=~/.ssh/agent.env
	agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }
	agent_start () {
	    (umask 077; ssh-agent >| "$env")
    	. "$env" >| /dev/null ; }
	agent_load_env
	agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?) # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running
	if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
	    agent_start
	    echo "Ctrl-C to abort unlocking SSH key"
	    ssh-add
	elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
	    echo "Ctrl-C to abort unlocking SSH key"
	    ssh-add
	fi
	unset env
fi


### Alias

alias v='nvim'
alias untar='tar -xavf'
alias l.='ls -d .* --color=auto'
alias sv='sudo nvim'
alias root='sudo -i'
alias su='sudo -i'
alias r='ranger'
alias sr='sudo ranger'
alias c='clear'
alias cryptopen='sudo cryptsetup open'
alias cryptclose='sudo cryptsetup close'
alias py='python3'
alias py2='python2'
alias cdo='cd $OLDPWD'
alias grep='grep --color=auto'

## Arch
#alias y='paru --bottomup'
#alias yay='paru --bottomup'
#alias apt='paru --bottomup'
#alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'
#alias upall="yay -Syu --noconfirm"

## Debuntu
#alias cleanup='sudo apt autoremove'  # debuntu
#alias upall='sudo apt update && sudo apt upgrade'  # debuntu

## Bare Metal stuff
#alias winboot="sudo efibootmgr -n 0000"  
#alias nowinboot="sudo efibootmgr -N"
#alias igpu='sudo optimus-manager --switch integrated'
#alias dgpu='sudo optimus-manager --switch hybrid'
#alias dgpu2='sudo optimus-manager --switch nvidia'
#alias poff="systemctl poweroff -i"
#alias reboot="systemctl reboot"
#alias clock='tty-clock -s -c'
#alias wallset='feh --bg-fill'
#alias wall='$HOME/.fehbg'

## WSL Windows home
#export WINUSER=""
if [[ -d /mnt/c/Users/ ]]; then
	if [[ -d /mnt/c/Users/$USER ]]; then
		export WINUSER="/mnt/c/Users/$USER"
		alias cdw='cd $WINUSER'
	else
		echo "Please set your windows username in zshrc!"
	fi
fi
